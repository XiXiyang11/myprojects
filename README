工厂模式：
主文件夹只有三个：
config.py配置信息，app.py运行程序，ihome python包来存放模型所有的东西,所有的运行逻辑
#可以用版本的方式来区分蓝图,我们起的名字是api_1_0,api+版本号
utils用来存放自己编写的一些函数，比如自定义装饰器什么的
libs用来存放一些不是flask带的，而是别人编写的第三方工具
循环导入的问题解决办法：
     1。在局部导入包，那个包中的内容在哪用，才在那句的上文导入包
     2。把第三方包，可能会出现循环导入的包放在exts.py方件中，新建成一个空的对象
    --比如本来的db对象是要在ihome.init中就是建立的，这个init中会导入蓝图所在的文件，
    --然后在蓝图文件内部可能会对数据库表操作，所以会使用db对象，所以就又会导入ihome.init来引用db
    --这样就出现了循环导入的问题。。
logs文件夹中存放日志文件
    --logging.error()错误级别
    --logging.warn()警告级别
    --logging.info()消息提示级别
    --logging.debug()调试级别，在调试中遇到的错误就会保存到日志中
    --上边的级别是一层层来的，如果是debug级别，就相当于上边的四种级别的信息都会被写到日志中

导入的csrfprotect只是一个验证机制，对post\put\delete请求方式校验：
    --从cookie中获取一个csrf_token的值，
    --从请求体中获取一个csrf_token的值，
    --如果请求体的数据不是表单格式，可以将csrf_token的值放到请求头中，设置：X-CSRFToken
    --比对两个值，如果两个值相同，则检验通过，
    --可以进入到视图函数中执行，
    --如果两个值不同，则检验失败，会向前端返回状态码400的错误，
    --但是这两个变量，是我们自己设置的，不是自带的



restful接口的命名规范
    --在名字中不写动词了，比如add,update,delete,get
    使用HTTP请求方式来代替接口中的动词
        --get  查询数据,select
            --如果查询时，数据资源较多，服务器不能将所有数据一次全部返回给客户端。API应该提供参数，过滤条件
        --post, 新建数据,create
        --put, 修改数据，,update
        --delete 删除数据,delete
    --把修改数据的一些视图都放在一个总路径下，一般是/api路径下
    --将api的版本号放在路径中，例/api/v1.0
    --路径中出现的资源名称尽量用复数，例users,goods
    --服务器向用户返回状态码和提示信息
    --服务器返回的错误信息以键值对的形式返回
    --服务器返回的数据格式，尽量使用JSON，避免使用XML
    --可在返回响应结果时提供链接其他API的方法，使客户端很方便的获取相关联的信息


后端视图函数中一般遵循四步走：
    --获取参数
    --检验参数
    --业务逻辑处理
    --返回值

通常可以把代码中设置的常量也保存到一个文件中，可放到constants.py中

发送短信的服务
    --容联云  云通讯 --www.yuntongxun.com