项目框架、流程：
创建config.py,是一个单独的文件，写配置使用，比如连接数据库
创建exts.py,扩展文件，创建空的db对象等操作，主要是为了解决循环引用的问题
创建models.py,放数据库表模型
在app.py中将app与db绑定
定义蓝图，将每一部分分模块，用来做模块化的，将不同的视图函数放入对应的模块中
创建blueprints的python包，里边每个模块创建一个python文件，该项目有两个模块，
问答模块：qa.py,用户登录注册模块：auth.py


 python的装饰器：
允许接收一个函数作为参数并且返回一个新的函数，这个新的函数是对原函数的一种增加和补充，可以在不改变原代码的前提下，增加额外的功能


在flask中，有一些操作是必须在应用上下文中进行的，比如数据库操作，邮件发送等操作。
在执行flask视图函数时，系统会自动将请求上下文和应用上下文推入栈中的
如果是执行视图之外的函数时，需要用到请求上下文或应用上下文的话就需要手动推入了
应用上下文会存放在localstack栈中，与应用app相关的操作就必须用到应用上下文
应用上下文的封装=flask核心对象+和外部协作的对象（如Pop,push等），应用上下文会随着请求的消失而消失
它的字面意思是 应用上下文，但它不是一直存在的，它只是request context 中的一个对 app 的代理(人)，所谓local proxy。
它的作用主要是帮助 request 获取当前的应用，它是伴 request 而生，随 request 而灭的。

